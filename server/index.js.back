const express = require('express');
const swaggerSetup = require('./swagger');
require('dotenv').config();
const { MongoClient, ServerApiVersion } = require('mongodb');

const app = express();

// MongoDB connection URI and database name
const uri = process.env.MONGO_URL;
const dbName = "WillowCraft";

const client = new MongoClient(uri, {
  serverApi: {
    version: ServerApiVersion.v1,
    strict: true,
    deprecationErrors: true,
  }
});

let resResult = "";

// Setup Swagger before defining other routes
swaggerSetup(app);

// Middleware setup
app.use(express.json());

async function run() {
  try {
    // Connect the client to the server
    await client.connect();
    // Send a ping to confirm a successful connection
    await client.db("admin").command({ ping: 1 });
    console.log("Pinged your deployment. You successfully connected to MongoDB!");
  } catch (err) {
    console.error("Failed to connect to MongoDB", err);
    process.exit(1); // Exit the application if connection fails
  }
}

async function getData() {
  const db = client.db(dbName);
  const collection = db.collection("documents");
  const findResult = await collection.find({}).toArray();
  console.log("Found documents =>", findResult);
  resResult = findResult;
  return "done.";
}

async function getProducts() {
  const db = client.db(dbName);
  const collection = db.collection("products");
  const findResult = await collection.find({}).toArray();
  console.log("Found documents =>", findResult);
  resResult = findResult;
  return "done.";
}

async function GetOrder(uid) {
  const db = client.db(dbName);
  const collection = db.collection("orders");
  const findResult = await collection.find({}).toArray();
  filterResult = findResult.filter((x) => x.uid == uid);
  resResult = filterResult;
  return findResult;
}

async function GetCart(uid) {
  const db = client.db(dbName);
  const collectionOrder = db.collection("orders");
  const collectionProducts = db.collection("products");
  const orders = await collectionOrder.find({}).toArray();
  filterOlders = orders.filter((x) => x.uid == uid);
  const products = await collectionProducts.find({}).toArray();

  const cartArray = [];
  products.map((x) => {
    filterOlders.map((y) => {
      if (y.pid == x._id.toString()) {
        cartArray.push(x);
      }
    });
  });

  resResult = cartArray;
  return "Success";
}

async function postData(name, id) {
  const db = client.db(dbName);
  const collection = db.collection("documents");
  var myobj = { name, id };
  const insertResult = await collection.insertOne(myobj);
  console.log("Inserted documents =>", insertResult);
}

async function postProduct(name, id, price, description, url) {
  const db = client.db(dbName);
  const collection = db.collection("products");
  var myobj = { name, id, price, description, url };
  const insertResult = await collection.insertOne(myobj);
  console.log("Inserted documents =>", insertResult);
}

async function AddtoOrders(uid, pid, price) {
  const db = client.db(dbName);
  const collection = db.collection("orders");
  var myobj = { uid, pid, price };
  const insertResult = await collection.insertOne(myobj);
  console.log("Inserted documents =>", insertResult);
}

const PORT = process.env.PORT || 3001;
app.use(express.json());

app.get("/api", (req, res) => {
  res.json({ message: "NODEJS API PROJECT", name: "github" });
});

app.get("/api/getdata", (req, res) => {
  getData()
    .then(() => res.json(resResult))
    .catch(console.error);
});

app.get("/api/getproducts", (req, res) => {
  getProducts()
    .then(() => res.json(resResult))
    .catch(console.error);
});

app.post("/api/getordercount", (req, res) => {
  GetOrder(req.body.uid)
    .then(() => res.json(resResult.length))
    .catch(console.error);
});

app.post("/api/getcart", (req, res) => {
  console.log("GetCart endpoint hit, uid:", req.body.uid);
  GetCart(req.body.uid)
    .then(() => {
      console.log("GetCart response:", resResult);
      res.json(resResult);
    })
    .catch((error) => {
      console.error("Error in GetCart:", error);
      res.status(500).json({ message: "Server Error", error });
    });
});


app.post("/api/post", (req, res) => {
  postData(req.body.name, req.body.id)
    .then(() => res.json("Success"))
    .catch(console.error);
});

app.post("/api/post_product", (req, res) => {
  postProduct(req.body.name, req.body.id, req.body.price, req.body.description, req.body.url)
    .then(() => res.json("Success"))
    .catch(console.error);
});

app.post("/api/addToCart", (req, res) => {
  AddtoOrders(req.body.uid, req.body.product_id, req.body.price)
    .then(() => res.type('text').send("Success"))  // Ensuring plain text response
    .catch(error => {
      console.error(error);
      res.status(500).send("Error");
    });
});

app.delete("/api/delete_product/:id", (req, res) => {
  const productId = req.params.id;
  const db = client.db(dbName);
  const collection = db.collection("products");

  collection.deleteOne({ id: productId })
    .then(() => res.json("Success"))
    .catch(error => {
      console.error('Error deleting product:', error);
      res.status(500).json('Error');
    });
});


run().then(() => {
  app.listen(PORT, () => {
    console.log(`Server listening on ${PORT}`);
  });
}).catch(console.error);

